{
  "version": 3,
  "sources": ["../src/downloadValidators.ts", "../src/common/formatJsonSting.ts", "../src/common/getFullPaths.ts", "../src/common/getConfig.ts", "../src/common/writeFileAsync.ts"],
  "sourcesContent": ["//import fs from 'fs';\nimport { MongoClient } from 'mongodb';\n\nimport formatJsonString from './common/formatJsonSting';\nimport getConfig from './common/getConfig';\nimport writeFileAsync from './common/writeFileAsync';\nimport pkg from '../package.json';\n\n// Replace the uri string with your MongoDB deployment's connection string.\nlet client: MongoClient;\n\nasync function downloadValidators(): Promise<number> {\n  try {\n    const config = await getConfig();\n    if (!config.uri) {\n      throw Error('I cannot connect to download your validators from Mongo without a uri.');\n    }\n    const files = [];\n    const banner = '/* This file is generated by mongo-type-gen.  Do not edit */';\n\n    client = new MongoClient(config.uri);\n\n    const db = client.db(config.db);\n    const listCollections = await db.listCollections().toArray();\n\n    for (const col of listCollections) {\n      const c = col as unknown as { options: { validator: string } };\n      const v = c.options.validator;\n      const s = formatJsonString(v);\n\n      const tsCode = [banner, `export default ${s};`].join('\\n\\n');\n      const file = writeFileAsync(`./${config.output}/${col.name}.validator.ts`, tsCode);\n      files.push(file);\n    }\n\n    await Promise.all(files);\n    console.info(`\u2705 ${pkg.name} validators downloaded from Mongo!`);\n    return 0;\n  } catch (e) {\n    const error = e instanceof Error ? e.message : e;\n    console.error(`\u274C ${pkg.name} failed to download validators from Mongo: `, error);\n    return 1;\n  } finally {\n    await client.close();\n  }\n}\n\nexport default downloadValidators;\n", "const formatJsonString = (obj: unknown): string => {\n  if (!obj) return '';\n  const keys = Object.keys(obj);\n  if (!keys || !keys.length) return '{}';\n  const json = JSON.stringify(obj, null, 2);\n  const removeDoubleQuoteKeys = json.replace(/\"([^\"]+)\":/g, '$1:');\n  const replaceDoubleQuotes = removeDoubleQuoteKeys.replace(/\"([^\"]*)\"/g, (p, p1) => {\n    if (p1.includes(\"'\")) {\n      return `\"${p1}\"`; // Use single quotes if value contains single quotes\n    }\n    return `'${p1}'`; // Use double quotes otherwise\n  });\n  // const addOpeningBraketSpacing = replaceDoubleQuotes.replace(/[[]/g, '[ ');\n  // const addClosingBraketSpacing = addOpeningBraketSpacing.replace(/]/g, ' ]');\n  // const addOpeningBraceSpacing = addClosingBraketSpacing.replace(/{/g, '{ ');\n  // const addClosingBraceSpacing = addOpeningBraceSpacing.replace(/}/g, ' }');\n  // const addComaSpacing = addClosingBraceSpacing.replace(/,/g, ', ');\n  return replaceDoubleQuotes;\n};\n\nexport default formatJsonString;\n", "import fg from 'fast-glob';\nimport path from 'path';\n\nconst getFullPaths = async (glob: string[] | string) => {\n  const paths = await fg(glob, { absolute: true, ignore: ['**/node_modules/**'] });\n  const mainFileDir = path.dirname(process.argv[1]);\n  const resolvedGlobs = paths.map((p) => path.resolve(mainFileDir, p));\n  return resolvedGlobs;\n};\n\nexport default getFullPaths;\n", "import getFullPaths from './getFullPaths';\nimport pkg from '../../package.json';\n\nconst getConfig = async () => {\n  const configPaths = await getFullPaths(['**/mtg.config.*s', '**/mongo-type-gen.config.*s']);\n  const configFile = await import(configPaths[0]);\n  if (configPaths.length > 1) {\n    console.log(`\uD83D\uDFE1 ${pkg.name} found multiple config files.  Using ${configPaths[0]}.`);\n  }\n\n  return configFile.default;\n};\n\nexport default getConfig;\n", "import fs from 'fs';\nimport { promisify } from 'util';\n\nconst writeFileAsync = promisify(fs.writeFile);\n\nexport default writeFileAsync;\n"],
  "mappings": ";0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GACA,IAAAI,EAA4B,mBCD5B,IAAMC,EAAoBC,GAAyB,CACjD,GAAI,CAACA,EAAK,MAAO,GACjB,IAAMC,EAAO,OAAO,KAAKD,CAAG,EAC5B,MAAI,CAACC,GAAQ,CAACA,EAAK,OAAe,KACrB,KAAK,UAAUD,EAAK,KAAM,CAAC,EACL,QAAQ,cAAe,KAAK,EACb,QAAQ,aAAc,CAACE,EAAGC,IACtEA,EAAG,SAAS,GAAG,EACV,IAAIA,CAAE,IAER,IAAIA,CAAE,GACd,CAOH,EAEOC,EAAQL,ECpBf,IAAAM,EAAe,wBACfC,EAAiB,mBAEXC,EAAe,MAAOC,GAA4B,CACtD,IAAMC,EAAQ,QAAM,EAAAC,SAAGF,EAAM,CAAE,SAAU,GAAM,OAAQ,CAAC,oBAAoB,CAAE,CAAC,EACzEG,EAAc,EAAAC,QAAK,QAAQ,QAAQ,KAAK,CAAC,CAAC,EAEhD,OADsBH,EAAM,IAAKI,GAAM,EAAAD,QAAK,QAAQD,EAAaE,CAAC,CAAC,CAErE,EAEOC,EAAQP,ECTf,IAAAQ,EAAgB,8BAEVC,EAAY,SAAY,CAC5B,IAAMC,EAAc,MAAMC,EAAa,CAAC,mBAAoB,6BAA6B,CAAC,EACpFC,EAAa,MAAM,OAAOF,EAAY,CAAC,GAC7C,OAAIA,EAAY,OAAS,GACvB,QAAQ,IAAI,aAAM,EAAAG,QAAI,IAAI,wCAAwCH,EAAY,CAAC,CAAC,GAAG,EAG9EE,EAAW,OACpB,EAEOE,EAAQL,ECbf,IAAAM,EAAe,iBACfC,EAA0B,gBAEpBC,KAAiB,aAAU,EAAAC,QAAG,SAAS,EAEtCC,EAAQF,EJCf,IAAAG,EAAgB,8BAGZC,EAEJ,eAAeC,GAAsC,CACnD,GAAI,CACF,IAAMC,EAAS,MAAMC,EAAU,EAC/B,GAAI,CAACD,EAAO,IACV,MAAM,MAAM,wEAAwE,EAEtF,IAAME,EAAQ,CAAC,EACTC,EAAS,+DAEfL,EAAS,IAAI,cAAYE,EAAO,GAAG,EAGnC,IAAMI,EAAkB,MADbN,EAAO,GAAGE,EAAO,EAAE,EACG,gBAAgB,EAAE,QAAQ,EAE3D,QAAWK,KAAOD,EAAiB,CAEjC,IAAME,EADID,EACE,QAAQ,UACdE,EAAIC,EAAiBF,CAAC,EAEtBG,EAAS,CAACN,EAAQ,kBAAkBI,CAAC,GAAG,EAAE,KAAK;AAAA;AAAA,CAAM,EACrDG,EAAOC,EAAe,KAAKX,EAAO,MAAM,IAAIK,EAAI,IAAI,gBAAiBI,CAAM,EACjFP,EAAM,KAAKQ,CAAI,CACjB,CAEA,aAAM,QAAQ,IAAIR,CAAK,EACvB,QAAQ,KAAK,UAAK,EAAAU,QAAI,IAAI,oCAAoC,EACvD,CACT,OAASC,EAAG,CACV,IAAMC,EAAQD,aAAa,MAAQA,EAAE,QAAUA,EAC/C,eAAQ,MAAM,UAAK,EAAAD,QAAI,IAAI,8CAA+CE,CAAK,EACxE,CACT,QAAE,CACA,MAAMhB,EAAO,MAAM,CACrB,CACF,CAEA,IAAOiB,EAAQhB",
  "names": ["downloadValidators_exports", "__export", "downloadValidators_default", "__toCommonJS", "import_mongodb", "formatJsonString", "obj", "keys", "p", "p1", "formatJsonSting_default", "import_fast_glob", "import_path", "getFullPaths", "glob", "paths", "fg", "mainFileDir", "path", "p", "getFullPaths_default", "import_package", "getConfig", "configPaths", "getFullPaths_default", "configFile", "pkg", "getConfig_default", "import_fs", "import_util", "writeFileAsync", "fs", "writeFileAsync_default", "import_package", "client", "downloadValidators", "config", "getConfig_default", "files", "banner", "listCollections", "col", "v", "s", "formatJsonSting_default", "tsCode", "file", "writeFileAsync_default", "pkg", "e", "error", "downloadValidators_default"]
}
