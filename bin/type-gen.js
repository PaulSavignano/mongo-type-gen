"use strict";var E=Object.create;var S=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var F=Object.getPrototypeOf,M=Object.prototype.hasOwnProperty;var k=(o,n,e,i)=>{if(n&&typeof n=="object"||typeof n=="function")for(let s of A(n))!M.call(o,s)&&s!==e&&S(o,s,{get:()=>n[s],enumerable:!(i=x(n,s))||i.enumerable});return o};var w=(o,n,e)=>(e=o!=null?E(F(o)):{},k(n||!o||!o.__esModule?S(e,"default",{value:o,enumerable:!0}):e,o));var h=w(require("fs")),K=require("glob"),O=w(require("path")),I={string:"string",bool:"boolean",date:"Date",double:"number",int:"number",objectId:"ObjectId"},q={string:"String",bool:"Boolean",date:"Date",double:"Float",int:"Int",objectId:"ObjectId"},j=({obj:o,allTypes:n=[],allSdls:e=[],title:i})=>{let{properties:s,required:$=[]}=o,a=[],u=[],y=Object.keys(s).sort();for(let c of y){let t=s[c],g=$.includes(c),d=g?c:`${c}?`,b=c,D=c.charAt(0).toUpperCase()+c.slice(1),r=`${i}${D}`;if(t.enum){let l=[`export enum ${r}Enum {`,...t.enum.map(m=>`  ${m} = '${m}',`),"}"].join(`
`);n.push(l);let p=[`enum ${r}Enum {`,...t.enum.map(m=>`  ${m}`),"}"].join(`
`);e.push(p);continue}if(typeof t.bsonType=="string"){if(t.bsonType==="array"){a.push(`  ${d}: ${r}[];`),u.push(`  ${b}: [${r}${g?"!":""}]`),j({obj:t.items,allTypes:n,allSdls:e,title:r});continue}if(t.bsonType==="object"){a.push(`  ${d}: ${r};`),u.push(`  ${b}: ${r}${g?"!":""}`),j({obj:t,allTypes:n,allSdls:e,title:r});continue}let l=I[t.bsonType],p=q[t.bsonType];if(l||l){l&&a.push(`  ${d}: ${l};`),p&&u.push(`  ${b}: ${p}${g?"!":""}`);continue}}if(Array.isArray(t.bsonType)){if(!t.bsonType.includes("null"))throw Error("Only one bsonType and null are supported for a bsonType array");let p=[];t.bsonType.forEach(f=>{let T=I[f];f==="null"?p.push("null"):T&&p.push(T)}),a.push(`  ${d}: ${p.join(" | ")};`);let m=t.bsonType.filter(f=>f!=="null");u.push(`  ${b}: ${q[m[0]]}${g?"!":""}`)}}n.push([`export type ${i} = {`,...a,"};"].join(`
`)),e.push([`type ${i} {`,...u,"}"].join(`
`))},v=O.default.resolve(__dirname,"..","**/mongoSchema.ts");var R=K.glob.sync(v);console.log("files",R);var P=async()=>{let o="/* This file was generated by mongo-type-gen */",n=[o,"import { ObjectId } from 'mongodb';"],e=[o,"import { gql } from 'graphql-tag';","export default gql`"];for(let $ of R){let y=(await import($)).default.$jsonSchema;j({obj:y,title:y.title,allTypes:n,allSdls:e})}let i=n.join(`

`),s=[...e,"`"].join(`

`);h.default.writeFileSync("./mongoDocTypes.ts",i),h.default.writeFileSync("./mongoDocSdls.ts",s),console.info("\u2705 Mongo Schema types generated!")};P();
//# sourceMappingURL=type-gen.js.map
