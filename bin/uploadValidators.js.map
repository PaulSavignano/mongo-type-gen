{
  "version": 3,
  "sources": ["../src/uploadValidators.ts", "../src/common/getFullPaths.ts", "../src/common/getConfig.ts"],
  "sourcesContent": ["import fs from 'fs';\nimport { MongoClient } from 'mongodb';\nimport { transpile } from 'typescript';\n\nimport getConfig from './common/getConfig';\nimport getFullPaths from './common/getFullPaths';\nimport pkg from '../package.json';\n\n// Replace the uri string with your MongoDB deployment's connection string.\nlet client: MongoClient;\n\nasync function uploadValidators(): Promise<number> {\n  try {\n    const config = await getConfig();\n    if (!config.uri) {\n      throw Error('I cannot connect to upload your validators to Mongo without a uri.');\n    }\n    client = new MongoClient(config.uri);\n\n    const validatorPaths = await getFullPaths('**/*.validator.ts');\n    const db = client.db(config.db);\n\n    const listCollections = await db.listCollections().toArray();\n    const collections = listCollections.map((c) => c.name);\n\n    const runCommandPromises = validatorPaths.map((path) => {\n      const validatorStr = fs.readFileSync(path, 'utf8');\n      const validator = transpile(validatorStr);\n      const v = eval(validator);\n      const cName = path.split('/').pop()?.split('.')[0] || '';\n\n      const isExisting = collections.includes(cName);\n      if (isExisting) {\n        const command = db.command({\n          collMod: cName,\n          validator: v,\n        });\n        return command;\n      }\n\n      const createCollection = db.createCollection(cName, {\n        validator: v,\n      });\n      return createCollection;\n    });\n\n    await Promise.all(runCommandPromises);\n    console.info(`\u2705 ${pkg.name} validators uploaded to Mongo!`);\n    return 0;\n  } catch (e) {\n    const error = e instanceof Error ? e.message : e;\n    console.error(`\u274C ${pkg.name} failed to download validators from Mongo: `, error);\n    return 1;\n  } finally {\n    await client.close();\n  }\n}\nuploadValidators()\n  .then((code) => {\n    process.exit(code);\n  })\n  .catch((code) => {\n    process.exit(code);\n  });\n", "import fg from 'fast-glob';\nimport path from 'path';\n\nconst getFullPaths = async (glob: string[] | string) => {\n  const paths = await fg(glob, { absolute: true, ignore: ['**/node_modules/**'] });\n  const mainFileDir = path.dirname(process.argv[1]);\n  const resolvedGlobs = paths.map((p) => path.resolve(mainFileDir, p));\n  return resolvedGlobs;\n};\n\nexport default getFullPaths;\n", "import getFullPaths from './getFullPaths';\nimport pkg from '../../package.json';\n\nconst getConfig = async () => {\n  const configPaths = await getFullPaths(['**/mtg.config.*s', '**/mongo-type-gen.config.*s']);\n  const configFile = await import(configPaths[0]);\n  if (configPaths.length > 1) {\n    console.log(`\uD83D\uDFE1 ${pkg.name} found multiple config files.  Using ${configPaths[0]}.`);\n  }\n\n  return configFile.default;\n};\n\nexport default getConfig;\n"],
  "mappings": ";wdAAA,IAAAA,EAAe,iBACfC,EAA4B,mBAC5BC,EAA0B,sBCF1B,IAAAC,EAAe,wBACfC,EAAiB,mBAEXC,EAAe,MAAOC,GAA4B,CACtD,IAAMC,EAAQ,QAAM,EAAAC,SAAGF,EAAM,CAAE,SAAU,GAAM,OAAQ,CAAC,oBAAoB,CAAE,CAAC,EACzEG,EAAc,EAAAC,QAAK,QAAQ,QAAQ,KAAK,CAAC,CAAC,EAEhD,OADsBH,EAAM,IAAKI,GAAM,EAAAD,QAAK,QAAQD,EAAaE,CAAC,CAAC,CAErE,EAEOC,EAAQP,ECTf,IAAAQ,EAAgB,8BAEVC,EAAY,SAAY,CAC5B,IAAMC,EAAc,MAAMC,EAAa,CAAC,mBAAoB,6BAA6B,CAAC,EACpFC,EAAa,MAAM,OAAOF,EAAY,CAAC,GAC7C,OAAIA,EAAY,OAAS,GACvB,QAAQ,IAAI,aAAM,EAAAG,QAAI,IAAI,wCAAwCH,EAAY,CAAC,CAAC,GAAG,EAG9EE,EAAW,OACpB,EAEOE,EAAQL,EFPf,IAAAM,EAAgB,8BAGZC,EAEJ,eAAeC,GAAoC,CACjD,GAAI,CACF,IAAM,OAAS,MAAMC,EAAU,EAC/B,GAAI,CAAC,OAAO,IACV,MAAM,MAAM,oEAAoE,EAElFF,EAAS,IAAI,cAAY,OAAO,GAAG,EAEnC,IAAM,eAAiB,MAAMG,EAAa,mBAAmB,EACvD,GAAKH,EAAO,GAAG,OAAO,EAAE,EAExB,gBAAkB,MAAM,GAAG,gBAAgB,EAAE,QAAQ,EACrD,YAAc,gBAAgB,IAAKI,GAAMA,EAAE,IAAI,EAE/C,mBAAqB,eAAe,IAAK,MAAS,CACtD,IAAM,aAAe,EAAAC,QAAG,aAAa,KAAM,MAAM,EAC3C,aAAY,aAAU,YAAY,EAClC,EAAI,KAAK,SAAS,EAClB,MAAQ,KAAK,MAAM,GAAG,EAAE,IAAI,GAAG,MAAM,GAAG,EAAE,CAAC,GAAK,GAEhD,WAAa,YAAY,SAAS,KAAK,EAC7C,GAAI,WAKF,OAJgB,GAAG,QAAQ,CACzB,QAAS,MACT,UAAW,CACb,CAAC,EAIH,IAAM,iBAAmB,GAAG,iBAAiB,MAAO,CAClD,UAAW,CACb,CAAC,EACD,OAAO,gBACT,CAAC,EAED,aAAM,QAAQ,IAAI,kBAAkB,EACpC,QAAQ,KAAK,UAAK,EAAAC,QAAI,IAAI,gCAAgC,EACnD,CACT,OAASC,EAAG,CACV,IAAMC,EAAQD,aAAa,MAAQA,EAAE,QAAUA,EAC/C,eAAQ,MAAM,UAAK,EAAAD,QAAI,IAAI,8CAA+CE,CAAK,EACxE,CACT,QAAE,CACA,MAAMR,EAAO,MAAM,CACrB,CACF,CACAC,EAAiB,EACd,KAAMQ,GAAS,CACd,QAAQ,KAAKA,CAAI,CACnB,CAAC,EACA,MAAOA,GAAS,CACf,QAAQ,KAAKA,CAAI,CACnB,CAAC",
  "names": ["import_fs", "import_mongodb", "import_typescript", "import_fast_glob", "import_path", "getFullPaths", "glob", "paths", "fg", "mainFileDir", "path", "p", "getFullPaths_default", "import_package", "getConfig", "configPaths", "getFullPaths_default", "configFile", "pkg", "getConfig_default", "import_package", "client", "uploadValidators", "getConfig_default", "getFullPaths_default", "c", "fs", "pkg", "e", "error", "code"]
}
