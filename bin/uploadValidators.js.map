{
  "version": 3,
  "sources": ["../src/uploadValidators.ts", "../src/common/getFullPaths.ts", "../src/common/getConfig.ts"],
  "sourcesContent": ["import fs from 'fs';\nimport { MongoClient } from 'mongodb';\nimport { transpile } from 'typescript';\n\nimport getConfig from './common/getConfig';\nimport getFullPaths from './common/getFullPaths';\nimport pkg from '../package.json';\n\n// Replace the uri string with your MongoDB deployment's connection string.\nlet client: MongoClient;\n\nasync function uploadValidators(): Promise<void> {\n  try {\n    const config = await getConfig();\n    const uri = 'mongodb://localhost:27017';\n    client = new MongoClient(uri);\n\n    const validatorPaths = await getFullPaths('**/*.validator.ts');\n    const db = client.db(config.db);\n\n    const listCollections = await db.listCollections().toArray();\n    const collections = listCollections.map((c) => c.name);\n\n    const runCommandPromises = validatorPaths.map((path) => {\n      const validatorStr = fs.readFileSync(path, 'utf8');\n      const validator = transpile(validatorStr);\n      const v = eval(validator);\n      const cName = path.split('/').pop()?.split('.')[0] || '';\n\n      const isExisting = collections.includes(cName);\n      if (isExisting) {\n        const command = db.command({\n          collMod: cName,\n          validator: v,\n        });\n        return command;\n      }\n\n      const createCollection = db.createCollection(cName, {\n        validator: v,\n      });\n      return createCollection;\n    });\n\n    await Promise.all(runCommandPromises);\n    console.info(`\u2705 ${pkg.name} validators uploaded to Mongo!`);\n  } finally {\n    await client.close();\n  }\n}\nuploadValidators().catch(console.dir);\n", "import fg from 'fast-glob';\nimport path from 'path';\n\nconst getFullPaths = async (glob: string[] | string) => {\n  const paths = await fg(glob, { absolute: true, ignore: ['**/node_modules/**'] });\n  const mainFileDir = path.dirname(process.argv[1]);\n  const resolvedGlobs = paths.map((p) => path.resolve(mainFileDir, p));\n  return resolvedGlobs;\n};\n\nexport default getFullPaths;\n", "import getFullPaths from './getFullPaths';\nimport pkg from '../../package.json';\n\nconst getConfig = async () => {\n  const configPaths = await getFullPaths(['**/mtg.config.*s', '**/mongo-type-gen.config.*s']);\n  const configFile = await import(configPaths[0]);\n  if (configPaths.length > 1) {\n    console.log(`\u26A0\uFE0F ${pkg.name} found multiple config files.  Using ${configPaths[0]}.`);\n  }\n\n  return configFile.default;\n};\n\nexport default getConfig;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gBAAe;AACf,qBAA4B;AAC5B,wBAA0B;;;ACF1B,uBAAe;AACf,kBAAiB;AAEjB,IAAM,eAAe,OAAO,SAA4B;AACtD,QAAM,QAAQ,UAAM,iBAAAA,SAAG,MAAM,EAAE,UAAU,MAAM,QAAQ,CAAC,oBAAoB,EAAE,CAAC;AAC/E,QAAM,cAAc,YAAAC,QAAK,QAAQ,QAAQ,KAAK,CAAC,CAAC;AAChD,QAAM,gBAAgB,MAAM,IAAI,CAAC,MAAM,YAAAA,QAAK,QAAQ,aAAa,CAAC,CAAC;AACnE,SAAO;AACT;AAEA,IAAO,uBAAQ;;;ACTf,qBAAgB;AAEhB,IAAM,YAAY,YAAY;AAC5B,QAAM,cAAc,MAAM,qBAAa,CAAC,oBAAoB,6BAA6B,CAAC;AAC1F,QAAM,aAAa,MAAM,OAAO,YAAY,CAAC;AAC7C,MAAI,YAAY,SAAS,GAAG;AAC1B,YAAQ,IAAI,gBAAM,eAAAC,QAAI,IAAI,wCAAwC,YAAY,CAAC,CAAC,GAAG;AAAA,EACrF;AAEA,SAAO,WAAW;AACpB;AAEA,IAAO,oBAAQ;;;AFPf,IAAAC,kBAAgB;AAGhB,IAAI;AAEJ,eAAe,mBAAkC;AAC/C,MAAI;AACF,UAAM,SAAS,MAAM,kBAAU;AAC/B,UAAM,MAAM;AACZ,aAAS,IAAI,2BAAY,GAAG;AAE5B,UAAM,iBAAiB,MAAM,qBAAa,mBAAmB;AAC7D,UAAM,KAAK,OAAO,GAAG,OAAO,EAAE;AAE9B,UAAM,kBAAkB,MAAM,GAAG,gBAAgB,EAAE,QAAQ;AAC3D,UAAM,cAAc,gBAAgB,IAAI,CAAC,MAAM,EAAE,IAAI;AAErD,UAAM,qBAAqB,eAAe,IAAI,CAAC,SAAS;AACtD,YAAM,eAAe,UAAAC,QAAG,aAAa,MAAM,MAAM;AACjD,YAAM,gBAAY,6BAAU,YAAY;AACxC,YAAM,IAAI,KAAK,SAAS;AACxB,YAAM,QAAQ,KAAK,MAAM,GAAG,EAAE,IAAI,GAAG,MAAM,GAAG,EAAE,CAAC,KAAK;AAEtD,YAAM,aAAa,YAAY,SAAS,KAAK;AAC7C,UAAI,YAAY;AACd,cAAM,UAAU,GAAG,QAAQ;AAAA,UACzB,SAAS;AAAA,UACT,WAAW;AAAA,QACb,CAAC;AACD,eAAO;AAAA,MACT;AAEA,YAAM,mBAAmB,GAAG,iBAAiB,OAAO;AAAA,QAClD,WAAW;AAAA,MACb,CAAC;AACD,aAAO;AAAA,IACT,CAAC;AAED,UAAM,QAAQ,IAAI,kBAAkB;AACpC,YAAQ,KAAK,UAAK,gBAAAC,QAAI,IAAI,gCAAgC;AAAA,EAC5D,UAAE;AACA,UAAM,OAAO,MAAM;AAAA,EACrB;AACF;AACA,iBAAiB,EAAE,MAAM,QAAQ,GAAG;",
  "names": ["fg", "path", "pkg", "import_package", "fs", "pkg"]
}
