#!/usr/bin/env node
"use strict";var w=Object.create;var m=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var P=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var F=(o,t,n,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of b(t))!y.call(o,a)&&a!==n&&m(o,a,{get:()=>t[a],enumerable:!(e=C(t,a))||e.enumerable});return o};var i=(o,t,n)=>(n=o!=null?w(P(o)):{},F(t||!o||!o.__esModule?m(n,"default",{value:o,enumerable:!0}):n,o));var p=i(require("fs")),u=require("mongodb"),h=require("typescript");var d=i(require("fast-glob")),s=i(require("path")),M=async o=>{let t=await(0,d.default)(o,{absolute:!0,ignore:["**/node_modules/**"]}),n=s.default.dirname(process.argv[1]);return t.map(a=>s.default.resolve(n,a))},r=M;var f=i(require("../package.json")),x=async()=>{let o=await r(["**/mtg.config.*s","**/mongo-type-gen.config.*s"]),t=await import(o[0]);return o.length>1&&console.log(`\u{1F7E1} ${f.default.name} found multiple config files.  Using ${o[0]}.`),t.default},g=x;var c=i(require("../package.json")),l;async function E(){try{let config=await g();if(!config.uri)throw Error("I cannot connect to upload your validators to Mongo without a uri.");l=new u.MongoClient(config.uri);let validatorPaths=await r("**/*.validator.ts"),db=l.db(config.db),listCollections=await db.listCollections().toArray(),collections=listCollections.map(o=>o.name),runCommandPromises=validatorPaths.map(path=>{let validatorStr=p.default.readFileSync(path,"utf8"),validator=(0,h.transpile)(validatorStr),v=eval(validator),cName=path.split("/").pop()?.split(".")[0]||"",isExisting=collections.includes(cName);if(isExisting)return db.command({collMod:cName,validator:v});let createCollection=db.createCollection(cName,{validator:v});return createCollection});return await Promise.all(runCommandPromises),console.info(`\u2705 ${c.default.name} validators uploaded to Mongo!`),0}catch(o){let t=o instanceof Error?o.message:o;return console.error(`\u274C ${c.default.name} failed to download validators from Mongo: `,t),1}finally{await l.close()}}E().then(o=>{process.exit(o)}).catch(o=>{process.exit(o)});
//# sourceMappingURL=uploadValidators.js.map
