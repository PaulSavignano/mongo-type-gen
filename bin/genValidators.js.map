{
  "version": 3,
  "sources": ["../src/genValidators.ts", "../src/common/formatJsonSting.ts", "../src/common/getFullPaths.ts", "../src/common/getConfig.ts", "../src/common/writeFileAsync.ts"],
  "sourcesContent": ["//import fs from 'fs';\nimport { MongoClient } from 'mongodb';\n\nimport formatJsonString from './common/formatJsonSting';\nimport getConfig from './common/getConfig';\nimport writeFileAsync from './common/writeFileAsync';\nimport pkg from '../package.json';\n\n// Replace the uri string with your MongoDB deployment's connection string.\nlet client: MongoClient;\n\nasync function genValidators(): Promise<void> {\n  try {\n    const config = await getConfig();\n    const files = [];\n    const banner = '/* This file is generated by mongo-type-gen.  Do not edit */';\n\n    client = new MongoClient(config.uri);\n\n    const db = client.db(config.db);\n    const listCollections = await db.listCollections().toArray();\n\n    for (const col of listCollections) {\n      const c = col as unknown as { options: { validator: string } };\n      const v = c.options.validator;\n      const s = formatJsonString(v);\n\n      const tsCode = [banner, `export default ${s};`].join('\\n\\n');\n      const file = writeFileAsync(`./${config.output}/${col.name}.validator.ts`, tsCode);\n      files.push(file);\n    }\n\n    await Promise.all(files);\n    console.info(`\u2705 ${pkg.name} validators generated!`);\n  } finally {\n    await client.close();\n  }\n}\ngenValidators().catch(console.error);\n", "const formatJsonString = (obj: unknown): string => {\n  if (!obj) return '';\n  const keys = Object.keys(obj);\n  if (!keys || !keys.length) return '{}';\n  const json = JSON.stringify(obj, null, 2);\n  const removeDoubleQuoteKeys = json.replace(/\"([^\"]+)\":/g, '$1:');\n  const replaceDoubleQuotes = removeDoubleQuoteKeys.replace(/\"([^\"]*)\"/g, (p, p1) => {\n    if (p1.includes(\"'\")) {\n      return `\"${p1}\"`; // Use single quotes if value contains single quotes\n    }\n    return `'${p1}'`; // Use double quotes otherwise\n  });\n  // const addOpeningBraketSpacing = replaceDoubleQuotes.replace(/[[]/g, '[ ');\n  // const addClosingBraketSpacing = addOpeningBraketSpacing.replace(/]/g, ' ]');\n  // const addOpeningBraceSpacing = addClosingBraketSpacing.replace(/{/g, '{ ');\n  // const addClosingBraceSpacing = addOpeningBraceSpacing.replace(/}/g, ' }');\n  // const addComaSpacing = addClosingBraceSpacing.replace(/,/g, ', ');\n  return replaceDoubleQuotes;\n};\n\nexport default formatJsonString;\n", "import fg from 'fast-glob';\nimport path from 'path';\n\nconst getFullPaths = async (glob: string[] | string) => {\n  const paths = await fg(glob, { absolute: true, ignore: ['**/node_modules/**'] });\n  console.log('paths are ', paths);\n  const mainFileDir = path.dirname(process.argv[1]);\n  const resolvedGlobs = paths.map((p) => path.resolve(mainFileDir, p));\n  return resolvedGlobs;\n};\n\nexport default getFullPaths;\n", "import getFullPaths from './getFullPaths';\nimport pkg from '../../package.json';\n\nconst getConfig = async () => {\n  const configPaths = await getFullPaths(['**/mtg.config.*s', '**/mongo-type-gen.config.*s']);\n  if (configPaths.length > 1) {\n    throw Error(\n      `\u274C ${pkg.name} found multiple config files: \\n${configPaths.join('\\n')}\\nPlease only use one config file.`,\n    );\n  }\n  const configFile = await import(configPaths[0]);\n  return configFile.default;\n};\n\nexport default getConfig;\n", "import fs from 'fs';\nimport { promisify } from 'util';\n\nconst writeFileAsync = promisify(fs.writeFile);\n\nexport default writeFileAsync;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,qBAA4B;;;ACD5B,IAAM,mBAAmB,CAAC,QAAyB;AACjD,MAAI,CAAC;AAAK,WAAO;AACjB,QAAM,OAAO,OAAO,KAAK,GAAG;AAC5B,MAAI,CAAC,QAAQ,CAAC,KAAK;AAAQ,WAAO;AAClC,QAAM,OAAO,KAAK,UAAU,KAAK,MAAM,CAAC;AACxC,QAAM,wBAAwB,KAAK,QAAQ,eAAe,KAAK;AAC/D,QAAM,sBAAsB,sBAAsB,QAAQ,cAAc,CAAC,GAAG,OAAO;AACjF,QAAI,GAAG,SAAS,GAAG,GAAG;AACpB,aAAO,IAAI,EAAE;AAAA,IACf;AACA,WAAO,IAAI,EAAE;AAAA,EACf,CAAC;AAMD,SAAO;AACT;AAEA,IAAO,0BAAQ;;;ACpBf,uBAAe;AACf,kBAAiB;AAEjB,IAAM,eAAe,OAAO,SAA4B;AACtD,QAAM,QAAQ,UAAM,iBAAAA,SAAG,MAAM,EAAE,UAAU,MAAM,QAAQ,CAAC,oBAAoB,EAAE,CAAC;AAC/E,UAAQ,IAAI,cAAc,KAAK;AAC/B,QAAM,cAAc,YAAAC,QAAK,QAAQ,QAAQ,KAAK,CAAC,CAAC;AAChD,QAAM,gBAAgB,MAAM,IAAI,CAAC,MAAM,YAAAA,QAAK,QAAQ,aAAa,CAAC,CAAC;AACnE,SAAO;AACT;AAEA,IAAO,uBAAQ;;;ACVf,qBAAgB;AAEhB,IAAM,YAAY,YAAY;AAC5B,QAAM,cAAc,MAAM,qBAAa,CAAC,oBAAoB,6BAA6B,CAAC;AAC1F,MAAI,YAAY,SAAS,GAAG;AAC1B,UAAM;AAAA,MACJ,UAAK,eAAAC,QAAI,IAAI;AAAA,EAAmC,YAAY,KAAK,IAAI,CAAC;AAAA;AAAA,IACxE;AAAA,EACF;AACA,QAAM,aAAa,MAAM,OAAO,YAAY,CAAC;AAC7C,SAAO,WAAW;AACpB;AAEA,IAAO,oBAAQ;;;ACdf,gBAAe;AACf,kBAA0B;AAE1B,IAAM,qBAAiB,uBAAU,UAAAC,QAAG,SAAS;AAE7C,IAAO,yBAAQ;;;AJCf,IAAAC,kBAAgB;AAGhB,IAAI;AAEJ,eAAe,gBAA+B;AAC5C,MAAI;AACF,UAAM,SAAS,MAAM,kBAAU;AAC/B,UAAM,QAAQ,CAAC;AACf,UAAM,SAAS;AAEf,aAAS,IAAI,2BAAY,OAAO,GAAG;AAEnC,UAAM,KAAK,OAAO,GAAG,OAAO,EAAE;AAC9B,UAAM,kBAAkB,MAAM,GAAG,gBAAgB,EAAE,QAAQ;AAE3D,eAAW,OAAO,iBAAiB;AACjC,YAAM,IAAI;AACV,YAAM,IAAI,EAAE,QAAQ;AACpB,YAAM,IAAI,wBAAiB,CAAC;AAE5B,YAAM,SAAS,CAAC,QAAQ,kBAAkB,CAAC,GAAG,EAAE,KAAK,MAAM;AAC3D,YAAM,OAAO,uBAAe,KAAK,OAAO,MAAM,IAAI,IAAI,IAAI,iBAAiB,MAAM;AACjF,YAAM,KAAK,IAAI;AAAA,IACjB;AAEA,UAAM,QAAQ,IAAI,KAAK;AACvB,YAAQ,KAAK,UAAK,gBAAAC,QAAI,IAAI,wBAAwB;AAAA,EACpD,UAAE;AACA,UAAM,OAAO,MAAM;AAAA,EACrB;AACF;AACA,cAAc,EAAE,MAAM,QAAQ,KAAK;",
  "names": ["fg", "path", "pkg", "fs", "import_package", "pkg"]
}
