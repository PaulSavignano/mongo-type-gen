{
  "version": 3,
  "sources": ["../src/genTypes.ts"],
  "sourcesContent": ["import { watch } from \"chokidar\";\nimport fs from \"fs\";\nimport { glob } from \"glob\";\nimport path from \"path\";\n\nconst typeMapping: Record<string, string> = {\n  string: \"string\",\n  bool: \"boolean\",\n  date: \"Date\",\n  double: \"number\",\n  int: \"number\",\n  objectId: \"ObjectId\",\n};\n\nconst sdlMapping: Record<string, string> = {\n  string: \"String\",\n  bool: \"Boolean\",\n  date: \"Date\",\n  double: \"Float\",\n  int: \"Int\",\n  objectId: \"ObjectId\",\n};\n\n// tab   &#9\n\nconst reducer = ({\n  obj,\n  allTypes = [],\n  allSdls = [],\n  title,\n}: {\n  obj: any;\n  allTypes: string[];\n  allSdls: string[];\n  title: string;\n}) => {\n  const { properties, required = [] } = obj;\n  const typeResult: string[] = [];\n  const sdlResult: string[] = [];\n\n  const propKeys = Object.keys(properties).sort();\n  for (const k of propKeys) {\n    const value = properties[k];\n    const isKeyRequired = required.includes(k);\n    const typeKey = isKeyRequired ? k : `${k}?`;\n    const sdlKey = k;\n\n    const properK = k.charAt(0).toUpperCase() + k.slice(1);\n    const childType = `${title}${properK}`;\n\n    if (value.enum) {\n      const enumType = [\n        `export enum ${childType}Enum {`,\n        ...value.enum.map((v: string) => `  ${v} = '${v}',`),\n        `}`,\n      ].join(\"\\n\");\n      allTypes.push(enumType);\n\n      const enumSdl = [\n        `enum ${childType}Enum {`,\n        ...value.enum.map((v: string) => `  ${v}`),\n        `}`,\n      ].join(\"\\n\");\n      allSdls.push(enumSdl);\n      continue;\n    }\n\n    if (typeof value.bsonType === \"string\") {\n      if (value.bsonType === \"array\") {\n        typeResult.push(`  ${typeKey}: ${childType}[];`);\n        sdlResult.push(\n          `  ${sdlKey}: [${childType}${isKeyRequired ? \"!\" : \"\"}]`\n        );\n        reducer({\n          obj: value.items,\n          allTypes,\n          allSdls,\n          title: childType,\n        });\n        continue;\n      }\n\n      if (value.bsonType === \"object\") {\n        typeResult.push(`  ${typeKey}: ${childType};`);\n        sdlResult.push(`  ${sdlKey}: ${childType}${isKeyRequired ? \"!\" : \"\"}`);\n        reducer({\n          obj: value,\n          allTypes,\n          allSdls,\n          title: childType,\n        });\n        continue;\n      }\n\n      const mappedTypeValue = typeMapping[value.bsonType];\n      const mappedSdlValue = sdlMapping[value.bsonType];\n\n      if (mappedTypeValue || mappedTypeValue) {\n        if (mappedTypeValue) {\n          typeResult.push(`  ${typeKey}: ${mappedTypeValue};`);\n        }\n\n        if (mappedSdlValue) {\n          sdlResult.push(\n            `  ${sdlKey}: ${mappedSdlValue}${isKeyRequired ? \"!\" : \"\"}`\n          );\n        }\n        continue;\n      }\n    }\n\n    if (Array.isArray(value.bsonType)) {\n      const valid = value.bsonType.includes(\"null\");\n      if (!valid) {\n        throw Error(\n          `Only one bsonType and null are supported for a bsonType array`\n        );\n      }\n      // handle Typescript\n      const res: string[] = [];\n      value.bsonType.forEach((v: string) => {\n        const mapped = typeMapping[v];\n        if (v === \"null\") {\n          res.push(\"null\");\n        } else if (mapped) {\n          res.push(mapped);\n        }\n      });\n      typeResult.push(`  ${typeKey}: ${res.join(\" | \")};`);\n\n      // handle SDL\n      const singleType = value.bsonType.filter((v: string) => v !== \"null\");\n      sdlResult.push(\n        `  ${sdlKey}: ${sdlMapping[singleType[0]]}${isKeyRequired ? \"!\" : \"\"}`\n      );\n    }\n  }\n\n  allTypes.push([`export type ${title} = {`, ...typeResult, \"};\"].join(\"\\n\"));\n  allSdls.push([`type ${title} {`, ...sdlResult, \"}\"].join(\"\\n\"));\n};\n\nconst abosolutePath = path.resolve(__dirname, \"..\", \"**/mongoSchema.ts\");\nconst filePattern = `**/mongoSchema.ts`;\n\nconst files = glob.sync(abosolutePath);\n\nconsole.log(\"files\", files);\nconst typeGen = async () => {\n  const banner = \"/* This file was generated by mongo-type-gen */\";\n  const allTypes: string[] = [banner, `import { ObjectId } from 'mongodb';`];\n  const allSdls: string[] = [\n    banner,\n    `import { gql } from 'graphql-tag';`,\n    \"export default gql`\",\n  ];\n\n  for (const file of files) {\n    const imported = await import(file);\n    const schema = imported.default;\n    const jsonSchema = schema.$jsonSchema;\n    reducer({\n      obj: jsonSchema,\n      title: jsonSchema.title,\n      allTypes,\n      allSdls,\n    });\n  }\n\n  const tsString = allTypes.join(\"\\n\\n\");\n  const sdlString = [...allSdls, \"`\"].join(\"\\n\\n\");\n  fs.writeFileSync(\"./mongoDocTypes.ts\", tsString);\n  fs.writeFileSync(\"./mongoDocSdls.ts\", sdlString);\n  console.info(\"\u2705 Mongo Schema types generated!\");\n};\n\ntypeGen();\n\n// let isInitial = true;\n// const run = async () => {\n//   console.log(\"WATCHED files \", filePattern, files);\n//   if (isInitial) {\n//     isInitial = false;\n//     await generateDocTypesFromSchemas();\n//   }\n\n//   if (process.argv.includes(\"--watch\")) {\n//     const watcher = watch(filePattern);\n\n//     watcher.on(\"change\", async (path, stats) => {\n//       console.log(\n//         `generateDocTypesFromSchemas change ${JSON.stringify(\n//           { path, stats },\n//           null,\n//           2\n//         )}`\n//       );\n//       await generateDocTypesFromSchemas();\n//     });\n//     process.once(\"SIGINT\", async () => {\n//       console.log(\"generateDocTypesFromSchemas SIGINT\");\n//       await watcher.close();\n//     });\n//     process.once(\"SIGTERM\", async () => {\n//       console.log(\"generateDocTypesFromSchemas SIGTERM\");\n//       await watcher.close();\n//     });\n//   }\n// };\n\n// run();\n"],
  "mappings": "wdACA,IAAAA,EAAe,iBACfC,EAAqB,gBACrBC,EAAiB,mBAEXC,EAAsC,CAC1C,OAAQ,SACR,KAAM,UACN,KAAM,OACN,OAAQ,SACR,IAAK,SACL,SAAU,UACZ,EAEMC,EAAqC,CACzC,OAAQ,SACR,KAAM,UACN,KAAM,OACN,OAAQ,QACR,IAAK,MACL,SAAU,UACZ,EAIMC,EAAU,CAAC,CACf,IAAAC,EACA,SAAAC,EAAW,CAAC,EACZ,QAAAC,EAAU,CAAC,EACX,MAAAC,CACF,IAKM,CACJ,GAAM,CAAE,WAAAC,EAAY,SAAAC,EAAW,CAAC,CAAE,EAAIL,EAChCM,EAAuB,CAAC,EACxBC,EAAsB,CAAC,EAEvBC,EAAW,OAAO,KAAKJ,CAAU,EAAE,KAAK,EAC9C,QAAWK,KAAKD,EAAU,CACxB,IAAME,EAAQN,EAAWK,CAAC,EACpBE,EAAgBN,EAAS,SAASI,CAAC,EACnCG,EAAUD,EAAgBF,EAAI,GAAGA,CAAC,IAClCI,EAASJ,EAETK,EAAUL,EAAE,OAAO,CAAC,EAAE,YAAY,EAAIA,EAAE,MAAM,CAAC,EAC/CM,EAAY,GAAGZ,CAAK,GAAGW,CAAO,GAEpC,GAAIJ,EAAM,KAAM,CACd,IAAMM,EAAW,CACf,eAAeD,CAAS,SACxB,GAAGL,EAAM,KAAK,IAAKO,GAAc,KAAKA,CAAC,OAAOA,CAAC,IAAI,EACnD,GACF,EAAE,KAAK;AAAA,CAAI,EACXhB,EAAS,KAAKe,CAAQ,EAEtB,IAAME,EAAU,CACd,QAAQH,CAAS,SACjB,GAAGL,EAAM,KAAK,IAAKO,GAAc,KAAKA,CAAC,EAAE,EACzC,GACF,EAAE,KAAK;AAAA,CAAI,EACXf,EAAQ,KAAKgB,CAAO,EACpB,QACF,CAEA,GAAI,OAAOR,EAAM,UAAa,SAAU,CACtC,GAAIA,EAAM,WAAa,QAAS,CAC9BJ,EAAW,KAAK,KAAKM,CAAO,KAAKG,CAAS,KAAK,EAC/CR,EAAU,KACR,KAAKM,CAAM,MAAME,CAAS,GAAGJ,EAAgB,IAAM,EAAE,GACvD,EACAZ,EAAQ,CACN,IAAKW,EAAM,MACX,SAAAT,EACA,QAAAC,EACA,MAAOa,CACT,CAAC,EACD,QACF,CAEA,GAAIL,EAAM,WAAa,SAAU,CAC/BJ,EAAW,KAAK,KAAKM,CAAO,KAAKG,CAAS,GAAG,EAC7CR,EAAU,KAAK,KAAKM,CAAM,KAAKE,CAAS,GAAGJ,EAAgB,IAAM,EAAE,EAAE,EACrEZ,EAAQ,CACN,IAAKW,EACL,SAAAT,EACA,QAAAC,EACA,MAAOa,CACT,CAAC,EACD,QACF,CAEA,IAAMI,EAAkBtB,EAAYa,EAAM,QAAQ,EAC5CU,EAAiBtB,EAAWY,EAAM,QAAQ,EAEhD,GAAIS,GAAmBA,EAAiB,CAClCA,GACFb,EAAW,KAAK,KAAKM,CAAO,KAAKO,CAAe,GAAG,EAGjDC,GACFb,EAAU,KACR,KAAKM,CAAM,KAAKO,CAAc,GAAGT,EAAgB,IAAM,EAAE,EAC3D,EAEF,QACF,CACF,CAEA,GAAI,MAAM,QAAQD,EAAM,QAAQ,EAAG,CAEjC,GAAI,CADUA,EAAM,SAAS,SAAS,MAAM,EAE1C,MAAM,MACJ,+DACF,EAGF,IAAMW,EAAgB,CAAC,EACvBX,EAAM,SAAS,QAASO,GAAc,CACpC,IAAMK,EAASzB,EAAYoB,CAAC,EACxBA,IAAM,OACRI,EAAI,KAAK,MAAM,EACNC,GACTD,EAAI,KAAKC,CAAM,CAEnB,CAAC,EACDhB,EAAW,KAAK,KAAKM,CAAO,KAAKS,EAAI,KAAK,KAAK,CAAC,GAAG,EAGnD,IAAME,EAAab,EAAM,SAAS,OAAQO,GAAcA,IAAM,MAAM,EACpEV,EAAU,KACR,KAAKM,CAAM,KAAKf,EAAWyB,EAAW,CAAC,CAAC,CAAC,GAAGZ,EAAgB,IAAM,EAAE,EACtE,CACF,CACF,CAEAV,EAAS,KAAK,CAAC,eAAeE,CAAK,OAAQ,GAAGG,EAAY,IAAI,EAAE,KAAK;AAAA,CAAI,CAAC,EAC1EJ,EAAQ,KAAK,CAAC,QAAQC,CAAK,KAAM,GAAGI,EAAW,GAAG,EAAE,KAAK;AAAA,CAAI,CAAC,CAChE,EAEMiB,EAAgB,EAAAC,QAAK,QAAQ,UAAW,KAAM,mBAAmB,EAGvE,IAAMC,EAAQ,OAAK,KAAKC,CAAa,EAErC,QAAQ,IAAI,QAASD,CAAK,EAC1B,IAAME,EAAU,SAAY,CAC1B,IAAMC,EAAS,kDACTC,EAAqB,CAACD,EAAQ,qCAAqC,EACnEE,EAAoB,CACxBF,EACA,qCACA,qBACF,EAEA,QAAWG,KAAQN,EAAO,CAGxB,IAAMO,GAFW,MAAM,OAAOD,IACN,QACE,YAC1BE,EAAQ,CACN,IAAKD,EACL,MAAOA,EAAW,MAClB,SAAAH,EACA,QAAAC,CACF,CAAC,CACH,CAEA,IAAMI,EAAWL,EAAS,KAAK;AAAA;AAAA,CAAM,EAC/BM,EAAY,CAAC,GAAGL,EAAS,GAAG,EAAE,KAAK;AAAA;AAAA,CAAM,EAC/C,EAAAM,QAAG,cAAc,qBAAsBF,CAAQ,EAC/C,EAAAE,QAAG,cAAc,oBAAqBD,CAAS,EAC/C,QAAQ,KAAK,sCAAiC,CAChD,EAEAR,EAAQ",
  "names": ["import_fs", "import_glob", "import_path", "typeMapping", "sdlMapping", "reducer", "obj", "allTypes", "allSdls", "title", "properties", "required", "typeResult", "sdlResult", "propKeys", "k", "value", "isKeyRequired", "typeKey", "sdlKey", "properK", "childType", "enumType", "v", "enumSdl", "mappedTypeValue", "mappedSdlValue", "res", "mapped", "singleType", "abosolutePath", "path", "files", "abosolutePath", "typeGen", "banner", "allTypes", "allSdls", "file", "jsonSchema", "reducer", "tsString", "sdlString", "fs"]
}
