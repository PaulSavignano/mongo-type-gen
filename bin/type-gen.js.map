{
  "version": 3,
  "sources": ["../src/genTypes.ts", "../src/watchDirs.ts", "../package.json"],
  "sourcesContent": ["import fg from 'fast-glob';\nimport fs from 'fs';\nimport { JSONSchema4 } from 'json-schema';\nimport path from 'path';\nimport { promisify } from 'util';\n\nimport watchDirs from './watchDirs';\n\nconst typeMapping: Record<string, string> = {\n  bool: 'boolean',\n  date: 'Date',\n  double: 'number',\n  int: 'number',\n  objectId: 'ObjectId',\n  string: 'string',\n};\n\nconst sdlMapping: Record<string, string> = {\n  bool: 'Boolean',\n  date: 'Date',\n  double: 'Float',\n  int: 'Int',\n  objectId: 'ObjectId',\n  string: 'String',\n};\n\n// tab   &#9\n\nconst writeFileAsync = promisify(fs.writeFile);\n\nconst getFullPath = async (glob: string) => {\n  const paths = await fg(glob, { absolute: true });\n  console.log('paths', paths);\n  const mainFileDir = path.dirname(process.argv[1]);\n  console.log('mainFileDir', mainFileDir);\n  const resolvedGlobs = paths.map((p) => path.resolve(mainFileDir, p));\n  return resolvedGlobs;\n};\n\nconst reducer = ({\n  allSdls = [],\n  allTypes = [],\n  obj,\n  title,\n}: {\n  allSdls: string[];\n  allTypes: string[];\n  obj: Record<string, JSONSchema4>;\n  title: string;\n}) => {\n  const { properties, required = [] } = obj;\n  const typeResult: string[] = [];\n  const sdlResult: string[] = [];\n\n  const propKeys = Object.keys(properties).sort();\n  for (const k of propKeys) {\n    const value = properties[k];\n    const isKeyRequired = required.includes(k);\n    const typeKey = isKeyRequired ? k : `${k}?`;\n    const sdlKey = k;\n\n    const properK = k.charAt(0).toUpperCase() + k.slice(1);\n    const childType = `${title}${properK}`;\n\n    if (value.enum) {\n      const enumType = [\n        `export enum ${childType}Enum {`,\n        ...value.enum.sort().map((v: string) => `  ${v} = '${v}',`),\n        '  }',\n      ].join('\\n');\n      allTypes.push(enumType);\n\n      const enumSdl = [`   enum ${childType}Enum {`, ...value.enum.map((v: string) => `    ${v}`), '  }'].join('\\n');\n      allSdls.push(enumSdl);\n      continue;\n    }\n\n    if (typeof value.bsonType === 'string') {\n      if (value.bsonType === 'array') {\n        const mappedItemType = typeMapping[value.items.bsonType];\n        const itemTypeValue = mappedItemType ? mappedItemType : childType;\n        const mappedItemSdl = sdlMapping[value.items.bsonType];\n        const itemSdlValue = mappedItemSdl ? mappedItemSdl : childType;\n        typeResult.push(`  ${typeKey}: ${itemTypeValue}[];`);\n        sdlResult.push(`    ${sdlKey}: [${itemSdlValue}${isKeyRequired ? '!' : ''}]`);\n        if (!mappedItemType) {\n          reducer({\n            allSdls,\n            allTypes,\n            obj: value.items,\n            title: childType,\n          });\n        }\n\n        continue;\n      }\n\n      if (value.bsonType === 'object') {\n        typeResult.push(`  ${typeKey}: ${childType};`);\n        sdlResult.push(`    ${sdlKey}: ${childType}${isKeyRequired ? '!' : ''}`);\n        reducer({\n          allSdls,\n          allTypes,\n          obj: value,\n          title: childType,\n        });\n        continue;\n      }\n\n      const mappedTypeValue = typeMapping[value.bsonType];\n      const mappedSdlValue = sdlMapping[value.bsonType];\n\n      if (mappedTypeValue || mappedTypeValue) {\n        if (mappedTypeValue) {\n          typeResult.push(`  ${typeKey}: ${mappedTypeValue};`);\n        }\n\n        if (mappedSdlValue) {\n          sdlResult.push(`    ${sdlKey}: ${mappedSdlValue}${isKeyRequired ? '!' : ''}`);\n        }\n        continue;\n      }\n    }\n\n    if (Array.isArray(value.bsonType)) {\n      const valid = value.bsonType.includes('null');\n      if (!valid) {\n        throw Error('Only one bsonType and null are supported for a bsonType array');\n      }\n      // handle Typescript\n      const res: string[] = [];\n      value.bsonType.forEach((v: string) => {\n        const mapped = typeMapping[v];\n        if (v === 'null') {\n          res.push('null');\n        } else if (mapped) {\n          res.push(mapped);\n        }\n      });\n      typeResult.push(`  ${typeKey}: ${res.join(' | ')};`);\n\n      // handle SDL\n      const singleType = value.bsonType.filter((v: string) => v !== 'null');\n      sdlResult.push(`    ${sdlKey}: ${sdlMapping[singleType[0]]}${isKeyRequired ? '!' : ''}`);\n    }\n  }\n\n  allTypes.push([`export type ${title} = {`, ...typeResult, '};'].join('\\n'));\n  allSdls.push([`  type ${title} {`, ...sdlResult, '  }'].join('\\n'));\n};\n\nconst generateTypes = async ({ outputPath, schemaPaths }: { outputPath: string; schemaPaths: string[] }) => {\n  const banner = '/* This file was generated by mongo-type-gen.  Do not edit */';\n  const allTypes: string[] = [banner, \"import { ObjectId } from 'mongodb';\"];\n  const allSdls: string[] = [banner, \"import { gql } from 'graphql-tag';\", 'export default gql`'];\n\n  for (const path of schemaPaths) {\n    const config = fs.readFileSync(path, 'utf8');\n    const moduleExportsObject = eval(config);\n    console.log('config is ', config);\n    const jsonSchema = moduleExportsObject.$jsonSchema;\n    reducer({\n      allSdls,\n      allTypes,\n      obj: jsonSchema,\n      title: jsonSchema.title,\n    });\n  }\n\n  const tsString = allTypes.join('\\n\\n');\n  const sdlString = [...allSdls, '`;'].join('\\n\\n');\n\n  await Promise.all([\n    writeFileAsync(`./${outputPath}/mongoDocTypes.ts`, tsString),\n    writeFileAsync(`./${outputPath}/mongoDocSdls.ts`, sdlString),\n  ]);\n\n  console.info('\u2705 Mongo Schema types generated!');\n};\n\nconst run = async () => {\n  const configPath = await getFullPath('**/typeGen.config.js');\n  const configFile = await import(configPath[0]);\n\n  const schemaPaths = await getFullPath(configFile.default.input);\n\n  if (process.argv.includes('--watch') || process.argv.includes('-w')) {\n    const onChange = async () =>\n      generateTypes({\n        outputPath: configFile.default.output,\n        schemaPaths,\n      });\n    watchDirs({\n      dirs: schemaPaths,\n      onChange,\n    });\n  }\n\n  generateTypes({\n    outputPath: configFile.default.output,\n    schemaPaths,\n  });\n};\n\nrun();\n\n// let isInitial = true;\n// const run = async () => {\n//   console.log(\"WATCHED files \", filePattern, files);\n//   if (isInitial) {\n//     isInitial = false;\n//     await generateDocTypesFromSchemas();\n//   }\n\n//   if (process.argv.includes(\"--watch\")) {\n//     const watcher = watch(filePattern);\n\n//     watcher.on(\"change\", async (path, stats) => {\n//       console.log(\n//         `generateDocTypesFromSchemas change ${JSON.stringify(\n//           { path, stats },\n//           null,\n//           2\n//         )}`\n//       );\n//       await generateDocTypesFromSchemas();\n//     });\n//     process.once(\"SIGINT\", async () => {\n//       console.log(\"generateDocTypesFromSchemas SIGINT\");\n//       await watcher.close();\n//     });\n//     process.once(\"SIGTERM\", async () => {\n//       console.log(\"generateDocTypesFromSchemas SIGTERM\");\n//       await watcher.close();\n//     });\n//   }\n// };\n\n// run();\n", "import fs from 'fs';\n\nimport pkg from '../package.json';\n\nfunction watchDirs({ dirs, onChange }: { dirs: string[]; onChange: () => Promise<void> }) {\n  console.log(`\u2705 ${pkg.name} watching: ${dirs.join(', ')}`);\n\n  let isChanging = false;\n  dirs.forEach((dir) => {\n    const watcher = fs.watch(dir, { recursive: true });\n    watcher.on('change', (eventType, filename) => {\n      if (!isChanging) {\n        isChanging = true;\n        onChange();\n        if (filename) {\n          setTimeout(() => {\n            isChanging = false;\n          }, 500);\n        }\n      }\n    });\n\n    watcher.on('error', (error) => {\n      console.error(`Watcher error: ${error}`);\n    });\n\n    // Event listener for 'close' event (optional)\n    watcher.on('close', () => {\n      console.log('Watcher closed');\n    });\n  });\n}\n\n// const createWatcher = async (file: string) => {\n//   console.info(`\u2705 ${pkg.name} subscribing watcher on ${file}.`);\n//   const subscription = await subscribe(file, (err, events) => {\n//     console.log('err', err);\n//     console.log('events', events);\n//   });\n//   console.log('subscription', subscription);\n\n//   [\n//     'SIGINT',\n//     'SIGTERM',\n//   ].forEach((_signal) => {\n//     console.info(`\uD83D\uDED1 ${pkg.name} unsubscribing watcher from ${file}.`);\n//     subscription.unsubscribe();\n//   });\n\n//   console.log('subscription', subscription);\n\n// };\n\nexport default watchDirs;\n", "{\n  \"name\": \"mongo-type-gen\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A type and sdl generator for MongoDB\",\n  \"main\": \"type-gen.js\",\n  \"bin\": {\n    \"mongo-type-gen\": \"bin/type-gen.js\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"mongo-type-gen\": \"ts-node-dev ./src/genTypes.ts -w\",\n    \"mongo-type-gen:build\": \"node ./bin/type-gen.js -w\",\n    \"build\": \"rm -rf bin && node esbuild.mjs\",\n    \"test-1\": \"node ./src/testWatch.js\"\n  },\n  \"keywords\": [\n    \"GraphQL\",\n    \"Mongo\",\n    \"Typescript\"\n  ],\n  \"author\": \"paul@savignano.io\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@types/debounce\": \"^1.2.1\",\n    \"@types/node\": \"^20.4.2\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.1.0\",\n    \"@typescript-eslint/parser\": \"^6.1.0\",\n    \"esbuild\": \"^0.18.14\",\n    \"eslint\": \"^8.45.0\",\n    \"eslint-config-prettier\": \"^8.8.0\",\n    \"eslint-import-resolver-typescript\": \"^3.5.5\",\n    \"eslint-plugin-import\": \"^2.27.5\",\n    \"eslint-plugin-prettier\": \"^5.0.0\",\n    \"eslint-plugin-sort-class-members\": \"^1.18.0\",\n    \"eslint-plugin-sort-destructure-keys\": \"^1.5.0\",\n    \"eslint-plugin-sort-keys-fix\": \"^1.1.2\",\n    \"eslint-plugin-typescript-sort-keys\": \"^2.3.0\",\n    \"prettier\": \"^3.0.0\",\n    \"ts-node\": \"^10.9.1\",\n    \"ts-node-dev\": \"^2.0.0\",\n    \"typescript\": \"^5.1.6\"\n  },\n  \"dependencies\": {\n    \"@parcel/watcher\": \"^2.2.0\",\n    \"chokidar\": \"^3.5.3\",\n    \"debounce\": \"^1.2.1\",\n    \"fast-glob\": \"^3.3.0\",\n    \"fs\": \"^0.0.1-security\",\n    \"glob\": \"^10.3.3\",\n    \"graphql-tag\": \"^2.12.6\",\n    \"json-schema\": \"^0.4.0\",\n    \"mongodb\": \"^5.7.0\"\n  },\n  \"directories\": {\n    \"example\": \"examples\",\n    \"lib\": \"lib\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/PaulSavignano/mongo-type-gen.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/PaulSavignano/mongo-type-gen/issues\"\n  },\n  \"homepage\": \"https://github.com/PaulSavignano/mongo-type-gen#readme\"\n}\n"],
  "mappings": "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",
  "names": ["import_fs", "fs", "fs", "fg", "path", "allSdls", "allTypes", "schemaPaths"]
}
