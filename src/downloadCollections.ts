import { MongoClient, CollectionInfo } from 'mongodb';

import formatJsonString from './common/formatJsonSting';
import getConfig from './common/getConfig';
import writeFile from './common/writeFile';
import pkg from '../package.json';

const banner = '/* This file is generated by mongo-type-gen.  Do not edit */';

// Replace the uri string with your MongoDB deployment's connection string.
let client: MongoClient;

async function downloadValidators(): Promise<number> {
  try {
    const { db, output, uri } = await getConfig();
    const files = [];

    client = new MongoClient(uri);

    const mongoDb = client.db(db);
    const collections = await mongoDb.listCollections().toArray();

    for (const col of collections) {
      const { name, options } = col as CollectionInfo;
      if (!options || !options.validator) {
        console.info(`üü° ${pkg.name} found no validators in Mongo`);
        continue;
      }
      const collectionIndexes = await mongoDb.collection(name).listIndexes().toArray();
      const str = formatJsonString({
        indexes: collectionIndexes.map(({ name: _deletedName, v: _deletedV, ...rest }) => rest),
        isGenerated: true,
        validator: options?.validator,
      });

      const tsCode = [banner, `export default ${str};`].join('\n\n');
      const file = writeFile({ data: tsCode, dir: output.collections, file: `${name}.collection.ts` });
      files.push(file);
    }

    await Promise.all(files);
    console.info(`‚úÖ ${pkg.name} validators downloaded from Mongo!`);
    return 0;
  } catch (e) {
    const error = e instanceof Error ? e.message : e;
    console.error(`‚ùå ${pkg.name} failed to download validators from Mongo: `, error);
    return 1;
  } finally {
    await client.close();
  }
}

export default downloadValidators;
